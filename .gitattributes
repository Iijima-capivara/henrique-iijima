class Phone: 
    def __init__(self):
        self._id = None
        self._number = None
        self._type = None
        self._main = None  
        self._createdAt = None
        self._updatedAt = None

    def get_id(self):
        return self._id

    def set_id(self, value: int):
        self._id = value

    def get_number(self):
        return self._number

    def set_number(self, value: str):
        self._number = value

    def get_type(self):
        return self._type

    def set_type(self, value: str):
        self._type = value

    def get_main(self):
        return self._main

    def set_main(self, value: bool):
        self._main = value

    def get_createdAt(self):
        return self._createdAt

    def set_createdAt(self, value: datetime):
        self._createdAt = value

    def get_updatedAt(self):
        return self._updatedAt

    def set_updatedAt(self, value: datetime):
        self._updatedAt = value

    def __hash__(self):
        return hash((self._id, self._number, self._type, self._main))

    def __eq__(self, other):
        if not isinstance(other, Phone):
            return False
        return self._id == other._id and self._number == other._number

    def __str__(self):
        return (f"Phone(id={self._id}, number={self._number}, type={self._type}, "
                f"is_main={self._main}, created_at={self._created_at}, updated_at={self._updated_at})")

    @classmethod
    def builder(cls):
        return cls.PhoneBuilder()

    class PhoneBuilder:
        def __init__(self):
            self._phone = Phone()

        def id(self, value: int):
            self._phone.set_id(value)
            return self
    
        def build(self):
            return self._phone